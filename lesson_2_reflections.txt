What happens when you initilalize a repository? Why do you need it?
When you initialze a repository by running the command 'git init' on
the directory you are currently in, it will no longer be known as a
'fatal error' when you run git log on that directory. You need to 
maintain a repository to keep track of all versions of all your 
files in that reposiotry, in case you come across any bugs, loose
any progress or need to revert back to a previous version of a file
or group of files.
How is the staging area different from the working directory or
repository? What value do you think it offers?
The staging area is sort of like a testing area, for files and 
repositories. It offers a good way to double check anything you may
need before actually creating a commit for any logical change.
How can you use the staging area to make sure you have one commit per
logical change?
The staging area saves any logical changes, per file. If you made any
logical changes to one file, but maybe not another, you can add that
file to the staging area and commit. Or you can choose to saved both
files in the staging area and commit both of them if they are all 
part of one logical change.
What are some situations when branches would be helpful in keeping
your history organized? How would branches help?
When created a different version of your code, you can use git to
track the hsitory of the repositories in each branch. This can
later help if you want to merge you other branches with your 
current master branch.
How do diagrams help you visualize the branch structure?
When creating a diagram, especially those with arrows that point to
their parent commit, all the way the original commit, it really gives
you a straightforward path to each branch and commit. It also helps
you easily spot out any commits that are currently in a detached 
HEAD state, until you add the branch and check it out.
What is the result of merging two branches together? Why do we
represent in the diagram the way we do?
The result of merging two branches results in the two branches
and their commits being merged together into the new 'master' branch.
The diagram is is represented in the way it is because it makes it 
easier for a user to follow the path of each commit's parent commit,
and it show the different commits in each of the branches, each
dependent of their commits, but both branches are independent of 
each other.
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
One of the pros for Git's auto merge is that it uses logic, such as when the last commit
was, to merge the most recent commits into a branch. The downside is 
that if the same strings or methods were changed, it will create a 
conflict that you have to manually fix later on.
GitHUb Reflections:
After creating a GitHub account, I was able to better familiarize
myself with pulling and pushing my repositories on my local 
machine or GitHub. I was also able to use new commands, such as git
remote add, to add my origin remote localtion to GitHub.